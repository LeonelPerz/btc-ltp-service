name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m --config=.golangci.yml

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Run tests with race detector
      run: go test -race -v ./...

    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out -covermode=atomic ./...

    - name: Check coverage threshold for critical packages
      run: |
        echo "📊 Checking coverage for critical packages (minimum 80% each)"
        echo "============================================================"
        
        # Critical packages that REQUIRE 80% coverage
        CRITICAL_PACKAGES=(
          "internal/infrastructure/repositories/cache"
          "internal/infrastructure/exchange/kraken"
        )
        
        FAILED_PACKAGES=()
        
        for pkg_path in "${CRITICAL_PACKAGES[@]}"; do
          echo ""
          echo "🔍 Testing package: $pkg_path"
          
          # Run tests with coverage for the specific package
          if go test -cover "./$pkg_path/..." 2>/dev/null | grep -q "coverage:"; then
            COVERAGE=$(go test -cover "./$pkg_path/..." 2>/dev/null | grep "coverage:" | tail -1 | awk '{print $2}' | sed 's/%//')
            echo "Coverage: ${COVERAGE}%"
            
            if (( $(echo "$COVERAGE < 80" | bc -l) )); then
              echo "FAIL: Coverage below 80% threshold"
              FAILED_PACKAGES+=("$pkg_path (${COVERAGE}%)")
            else
              echo "PASS: Coverage meets 80% threshold"
            fi
          else
            echo "FAIL: No tests found or tests failed"
            FAILED_PACKAGES+=("$pkg_path (no tests)")
          fi
        done
        
        # Show total coverage for informational purposes
        TOTAL_COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo ""
        echo "ℹ️  Total project coverage: ${TOTAL_COVERAGE}% (informational only)"
        
        # Fail only if there are critical packages with low coverage
        if [ ${#FAILED_PACKAGES[@]} -gt 0 ]; then
          echo ""
          echo "The following critical packages failed the 80% coverage requirement:"
          for failed in "${FAILED_PACKAGES[@]}"; do
            echo "   • $failed"
          done
          exit 1
        else
          echo ""
          echo "All critical packages meet the 80% coverage requirement!"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build application
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/api
        ls -la main

    - name: Test binary execution
      run: |
        timeout 5s ./main --help || true
        echo "Binary built successfully"

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: btc-ltp-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm btc-ltp-service:latest --help || true
        echo "Docker image built successfully"

    - name: Run security scan on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'btc-ltp-service:latest'
        format: 'table'
        exit-code: '0'  # Don't fail on security issues for now

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: btc-ltp-service:test
        load: true

    - name: Run integration tests with Docker Compose
      run: |
        # Crear un docker-compose temporal para tests
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          btc-ltp-service:
            image: btc-ltp-service:test
            ports:
              - "8080:8080"
            environment:
              - CACHE_BACKEND=memory
              - DEV_MODE=true
              - DEBUG_MODE=true
            healthcheck:
              test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
              interval: 10s
              timeout: 5s
              retries: 3
              start_period: 30s
        EOF

        # Iniciar el servicio
        docker-compose -f docker-compose.test.yml up -d

        # Esperar a que el servicio esté listo
        timeout 60s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

        # Ejecutar tests de integración básicos
        echo "Testing health endpoint..."
        curl -f http://localhost:8080/health

        echo "Testing metrics endpoint..."
        curl -f http://localhost:8080/metrics

        echo "Testing ready endpoint..."
        curl -f http://localhost:8080/ready

        echo "Testing LTP endpoint with mock data..."
        curl -f "http://localhost:8080/api/v1/ltp?pair=BTC/USD"

        echo "Integration tests passed!"

        # Limpiar
        docker-compose -f docker-compose.test.yml down
