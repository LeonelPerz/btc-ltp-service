#!/bin/bash
# Demo de Validaci√≥n con Tipos Inv√°lidos - Fail Fast
# Este script demuestra c√≥mo el sistema maneja strings y valores inv√°lidos en configuraci√≥n

set -e
echo "üîç Demo: Validaci√≥n de Tipos Inv√°lidos en Configuraci√≥n"
echo "====================================================="

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo ""
echo -e "${BLUE}üìö Teor√≠a: ¬øQu√© pasa con tipos inv√°lidos?${NC}"
echo "1. ENV vars con strings inv√°lidos ‚Üí Viper parsing error ANTES de validaci√≥n"
echo "2. YAML con valores inv√°lidos ‚Üí Viper usa defaults o falla silenciosamente"
echo "3. Nuestra validaci√≥n de integridad detecta estos casos edge"
echo ""

# Funci√≥n para probar casos de ENV vars
test_env_case() {
    local test_name="$1"
    local env_var="$2"
    local expected="$3"
    
    echo -e "${YELLOW}üß™ Test ENV: $test_name${NC}"
    echo "Command: $env_var go run cmd/api/main.go"
    echo ""
    
    # Ejecutar y capturar resultado
    if eval "$env_var timeout 3s go run cmd/api/main.go 2>&1" | grep -q "$expected"; then
        echo -e "${RED}‚úÖ ¬°CORRECTO! Error detectado: $expected${NC}"
    else
        echo -e "${GREEN}‚ùå ERROR: No se detect√≥ el error esperado${NC}"
    fi
    echo ""
    echo "=" | head -c 50; echo ""
}

# Funci√≥n para probar casos de archivos YAML
test_yaml_case() {
    local test_name="$1"
    local config_file="$2"
    local expected="$3"
    
    echo -e "${YELLOW}üß™ Test YAML: $test_name${NC}"
    echo "Config: $config_file"
    echo ""
    
    # Ejecutar y capturar resultado
    if timeout 3s go run cmd/api/main.go -config "$config_file" 2>&1 | grep -q "$expected"; then
        echo -e "${RED}‚úÖ ¬°CORRECTO! Error detectado: $expected${NC}"
    else
        echo -e "${GREEN}‚ùå INFO: Error no detectado (usando defaults)${NC}"
    fi
    echo ""
    echo "=" | head -c 50; echo ""
}

echo -e "${BLUE}üî¨ CASOS DE TEST: Variables de Entorno${NC}"
echo ""

# Test 1: String completamente inv√°lido en TTL
test_env_case "TTL con string inv√°lido" \
             "CACHE_TTL='abc-invalid-string'" \
             "time: invalid duration"

# Test 2: N√∫mero sin unidad en TTL
test_env_case "TTL sin unidad de tiempo" \
             "CACHE_TTL='123'" \
             "time: missing unit in duration"

# Test 3: String parcialmente v√°lido
test_env_case "TTL con formato malo" \
             "CACHE_TTL='30minutes'" \
             "time: unknown unit"

# Test 4: Caracteres especiales
test_env_case "TTL con caracteres especiales" \
             "CACHE_TTL='30s@#$'" \
             "time: invalid duration"

# Test 5: String vac√≠o
test_env_case "TTL string vac√≠o" \
             "CACHE_TTL=''" \
             "time: invalid duration"

echo ""
echo -e "${BLUE}üî¨ CASOS DE TEST: Archivos YAML${NC}"
echo ""

# Test archivos YAML con valores inv√°lidos
test_yaml_case "TTL con string inv√°lido en YAML" \
              "configs/config.test-invalid-types.yaml" \
              "Configuration loaded"

test_yaml_case "TTL con valor 0 en YAML" \
              "configs/config.test-zero-values.yaml" \
              "cache TTL parsed as 0"

echo ""
echo -e "${GREEN}üìä RESUMEN DE COMPORTAMIENTOS:${NC}"
echo ""
echo -e "${YELLOW}ENV Variables:${NC}"
echo "‚Ä¢ Strings inv√°lidos ‚Üí ${RED}Viper parsing error INMEDIATO${NC}"
echo "‚Ä¢ N√∫meros sin unidad ‚Üí ${RED}Viper parsing error INMEDIATO${NC}" 
echo "‚Ä¢ Caracteres especiales ‚Üí ${RED}Viper parsing error INMEDIATO${NC}"
echo ""
echo -e "${YELLOW}YAML Files:${NC}"
echo "‚Ä¢ Strings inv√°lidos ‚Üí ${GREEN}Viper usa defaults, servicio inicia${NC}"
echo "‚Ä¢ Valores 0 expl√≠citos ‚Üí ${RED}Nuestra validaci√≥n detecta y falla${NC}"
echo "‚Ä¢ Valores faltantes ‚Üí ${GREEN}Viper usa defaults del c√≥digo${NC}"
echo ""
echo -e "${BLUE}üéØ CONCLUSI√ìN:${NC}"
echo "‚Ä¢ ${RED}ENV vars fallan FAST en parsing (nivel Viper)${NC}"
echo "‚Ä¢ ${GREEN}YAML es m√°s permisivo, usa defaults silenciosamente${NC}"
echo "‚Ä¢ ${YELLOW}Nuestra validaci√≥n detecta casos edge (valores 0, vac√≠os)${NC}"
echo ""

# Mostrar ejemplo pr√°ctico final
echo -e "${BLUE}üîç EJEMPLO PR√ÅCTICO:${NC}"
echo ""
echo "Para demostrar parsing error:"
echo -e "${YELLOW}$ CACHE_TTL='abc' go run cmd/api/main.go${NC}"
echo "Result: time: invalid duration"
echo ""
echo "Para demostrar detecci√≥n de valores zero:"
echo -e "${YELLOW}$ go run cmd/api/main.go -config configs/config.test-zero-values.yaml${NC}"  
echo "Result: cache TTL parsed as 0, likely due to invalid duration format"
echo ""

echo -e "${GREEN}‚úÖ Demo de tipos inv√°lidos completado!${NC}"
