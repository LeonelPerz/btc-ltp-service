services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: btc-ltp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-""}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - btc-ltp-network

  # BTC LTP Service (Main Application)
  btc-ltp-service:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: btc-ltp-service
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - MOCK_MODE=false
      - DEV_MODE=false
      - CACHE_BACKEND=memory
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-""}
      - REDIS_DB=0
      - CACHE_TTL=60s
      - SUPPORTED_PAIRS=BTC/USD,ETH/USD,LTC/USD,XRP/USD,BTC/EUR,ETH/EUR
      # Timeouts mÃ¡s largos para APIs externas reales
      - KRAKEN_TIMEOUT=30s
      - KRAKEN_REQUEST_TIMEOUT=15s
      - KRAKEN_FALLBACK_TIMEOUT=20s
      # ðŸ†• ConfiguraciÃ³n del nuevo sistema de logging
      - LOG_LEVEL=debug
      - LOG_FORMAT=text
      - LOG_ADD_SOURCE=false
      - ENVIRONMENT=production
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - btc-ltp-network

  # Optional: Redis Commander for GUI management  
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: btc-ltp-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-""}
    depends_on:
      - redis
    networks:
      - btc-ltp-network
    profiles:
      - tools

volumes:
  redis_data:
    driver: local

networks:
  btc-ltp-network:
    driver: bridge
